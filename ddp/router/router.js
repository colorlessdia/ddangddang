const cache = require('memory-cache');
const express = require("express");
const db = require("../config/database");
const axios = require("axios");
const path = require("path");
const multer = require("multer");
// ÎπÑÎ∞ÄÎ≤àÌò∏ ÏïîÌò∏Ìôî Î™®Îìà
const bcrypt = require("bcrypt");
let conn = db.init();
const passport = require("passport"); // passport Î™®Îìà Î°úÎìú
const router = express.Router();
const { isLoggedIn, isNotLoggedIn } = require("../passport");


// ============================== multer ÏÑ§Ï†ï ==============================
const cacheDuration = 10 * 60 * 1000;
// ============================== multer ÏÑ§Ï†ï ==============================
const upload = multer({
  storage: multer.diskStorage({
    // Ï£ºÎ°ú multer.diskStorage ÏóêÏ†ÄÏû•ÏùÑ ÎßéÏù¥Ìï®
    // destination Ïñ¥ÎîîÏóêÏ†ÄÏû•Ìï†ÏßÄ,(Ïó¨Í∏∞ÏÑúÎäî 'uploads/' Ìè¥ÎçîÏóê Ï†ÄÏû•ÌïòÍ≤†Îã§)
    // done: ÏóêÎü¨Ï≤òÎ¶¨Ïö©, ÏóêÎü¨Ï≤òÎ¶¨ ÎØ∏Îì§Ïõ®Ïñ¥Î°ú Î≥¥ÎÇ¥Ï§å ÎëêÎ≤àÏß∏ ÌååÎùºÎØ∏ÌÑ∞Îäî Ïã§ÌñâÌï† ÎÇ¥Ïö©
    destination(req, file, done) {
      done(null, "ddp-react/public/images/SALE_IMAGE/");
    },
    filename(req, file, done) {
      // Î¨¥Ïä®Ïù¥Î¶ÑÏúºÎ°ú Ïò¨Î¶¥ÏßÄ
      // multer 1.4.5 Î≤ÑÏ†Ñ ÌïúÍ∏ÄÏù∏ÏΩîÎî© Î¨∏Ï†ú Ìï¥Í≤∞
      file.originalname = Buffer.from(file.originalname, "latin1").toString(
        "utf8"
      );
      // ÌôïÏû•Ïûê Ï∂îÏ∂úÌïòÎäîÏΩîÎìú
      const ext = path.extname(file.originalname);
      // Ïñ¥Îñ§Ïù¥Î¶ÑÏúºÎ°ú Ï†ÄÏû•Ìï†ÏßÄ1
      done(null, path.basename(file.originalname, ext) + Date.now() + ext);
    },
  }),
  // ÌååÏùº ÏÇ¨Ïù¥Ï¶à or ÌååÏùºÍ∞ØÏàò ÏÑ§Ï†ïÌïòÍ∏∞
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MBÌååÏùºÎßå ÏóÖÎ°úÎìúÍ∞ÄÎä•,
});

// router.get('/getData', function (req, res) {
//     // Í∞í Î≥¥ÎÇ¥Í∏∞
//     res.json({
//         name: 'hi'
//     })
// })

// ============================== ÎπÑÎìú GET ==============================
// router.get("/bid", (req, res) => {
//   let sql = `SELECT MAX(AUC_FEE) AS FEE FROM TB_AUCTION WHERE PRD_NO=70`;
//   conn.query(sql, [], (err, rows) => {
//     if (!err) {
//       console.log("Ï°∞ÌöåÌïòÍ∏∞ ÏÑ±Í≥µ");
//       console.log(rows);
//       const maxBid = rows[0].FEE;
//       console.log(maxBid);
//       res.render(path.join(__dirname, "..", "views", "sale.html"), {
//         fee: maxBid,
//       });
//     } else {
//       console.log("ÏÇΩÏûÖÏã§Ìå® „Öú„Öú");
//     }
//   });
//   // res.render(path.join(__dirname, "..", "views", "bids.html"));
// });

// ============================== ÎπÑÎìú POST ==============================
router.post("/bid", (req, res) => {
  const userCustId = req.body.CUST_ID;
  const userBidPrice = req.body.MAX_AUC_FEE + 5000;
  const userPrdNo = req.body.PRD_NO;
  console.log(userBidPrice);
  //   console.log("userCustId:", userCustId);
  //   console.log("userBidPrice:", userBidPrice);
  //   console.log("userPrdNo:", userPrdNo);

  let sql =
    "INSERT INTO TB_AUCTION (PRD_NO, CUST_ID, AUC_FEE) VALUES (?, ?, ?);";
  //   let sql2 = `SELECT A.*
  //   , B.IMG_PATH_1
  //   , B.IMG_PATH_2
  //   , B.IMG_PATH_3
  //   , B.IMG_PATH_4
  //   , MAX(C.AUC_FEE) AS AUC_FEE
  // FROM TB_PRD A
  //     LEFT JOIN TB_PRD_IMG B ON A.PRD_NO = B.PRD_NO
  //     LEFT JOIN TB_AUCTION C ON A.PRD_NO = C.PRD_NO
  // GROUP BY A.PRD_NO, B.IMG_PATH;`;

  conn.query(sql, [userPrdNo, userCustId, userBidPrice], (err, rows) => {
    if (!err) {
      console.log("ÏÇΩÏûÖÏÑ±Í≥µüòçüòç");
      res.end()
      // conn.query(sql2, [], (err, rows) => {
      //   if (!err) {
      //     console.log("Ï°∞ÌöåÏÑ±Í≥µüòçüòç");
      //     console.log(rows);
      //     res.render(path.join(__dirname, "..", "views", "sale.html"), {
      //       row: rows,
      //     });
      //   } else {
      //     console.log("ÏÇΩÏûÖÏã§Ìå® „Öú„Öú");
      //     console.log(err);
      //   }
      // });
    } else {
      console.log("ÏÇΩÏûÖÏã§Ìå® „Öú„Öú");
      console.log(err);
    }
  });
});

// ============================== Îß§Î¨ºÏù¥ÎØ∏ÏßÄ GET ==============================
router.get("/sale", (req, res) => {
  // console.log("Î¶¨ÏóëÌä∏Î°ú3333", req.session.passport.user.id)

  // Ï∫êÏãúÏóê ÏóÜÏùÑ Í≤ΩÏö∞ Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ (Ïòà: Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏøºÎ¶¨)

  // Îç∞Ïù¥ÌÑ∞Î•º Ï∫êÏãúÏóê Ï†ÄÏû•
  console.log(__dirname);
  let sql = `SELECT A.*,
                    B.IMG_PATH_1,
                    B.IMG_PATH_2,
                    B.IMG_PATH_3,
                    B.IMG_PATH_4,
                    MAX(C.AUC_FEE) AS MAX_AUC_FEE
                FROM
                  TB_PRD A
                LEFT JOIN
                  TB_PRD_IMG B ON A.PRD_NO = B.PRD_NO
                LEFT JOIN
                  TB_AUCTION C ON A.PRD_NO = C.PRD_NO
                GROUP BY
                  A.PRD_NO, B.IMG_PATH_1, B.IMG_PATH_2, B.IMG_PATH_3, B.IMG_PATH_4
                ORDER BY A.PRD_VIEWS DESC;`;
  conn.query(sql, [], (err, rows) => {
    if (!err) {
      console.log("Ïù¥ÎØ∏ÏßÄÎ∂àÎü¨Ïò§Í∏∞ ÏôÑÎ£å");
      // console.log(rows);
      res.json({ saleInfo: rows });

    } else {
      console.log("DBÎ™ÖÎ†πÏù¥ Ï†úÎåÄÎ°ú Ïã§ÌñâÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§!!!!!!!!");
    }
  });
  // next();

});

// router.get("/sale", (req, res) => {
//   // console.log("Î¶¨ÏóëÌä∏Î°ú3333", req.session.passport.user.id)

//   const saleInfo = cache.get('saleInfo');

//   if (saleInfo) {
//     console.log('Ï∫êÏâ¨Í∞Ä Ïù¥ÎØ∏ÏûàÏùå!');
//     return res.json({ saleInfo: saleInfo });
//   } else {
//     // Ï∫êÏãúÏóê ÏóÜÏùÑ Í≤ΩÏö∞ Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ (Ïòà: Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏøºÎ¶¨)

//     // Îç∞Ïù¥ÌÑ∞Î•º Ï∫êÏãúÏóê Ï†ÄÏû•
//     console.log(__dirname);
//     let sql = `SELECT A.*,
//                     B.IMG_PATH_1,
//                     B.IMG_PATH_2,
//                     B.IMG_PATH_3,
//                     B.IMG_PATH_4,
//                     MAX(C.AUC_FEE) AS MAX_AUC_FEE
//                 FROM
//                   TB_PRD A
//                 LEFT JOIN
//                   TB_PRD_IMG B ON A.PRD_NO = B.PRD_NO
//                 LEFT JOIN
//                   TB_AUCTION C ON A.PRD_NO = C.PRD_NO
//                 GROUP BY
//                   A.PRD_NO, B.IMG_PATH_1, B.IMG_PATH_2, B.IMG_PATH_3, B.IMG_PATH_4
//                 ORDER BY A.PRD_VIEWS DESC;`;
//     conn.query(sql, [], (err, rows) => {
//       if (!err) {
//         console.log("Ïù¥ÎØ∏ÏßÄÎ∂àÎü¨Ïò§Í∏∞ ÏôÑÎ£å");
//         // console.log(rows);
//         cache.put('saleInfo', rows);
//         console.log('Ï∫êÏâ¨Ï†ÄÏû• ÏÑ±Í≥µ„Öé„Öé ');
//         res.json({ saleInfo: rows });

//       } else {
//         console.log("DBÎ™ÖÎ†πÏù¥ Ï†úÎåÄÎ°ú Ïã§ÌñâÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§!!!!!!!!");
//       }
//     });
//     // next();
//   }
// });

// ============================== Îß§Î¨ºÏù¥ÎØ∏ÏßÄ POST ==============================
router.post("/sale", (req, res) => {
  let sql = `SELECT * FROM TB_PRD ('${i + 1}','${i + 1}','${imgPath}');`;

  conn.query(sql, [], (err, rows) => {
    if (!err) {
      console.log("Ïù¥ÎØ∏ÏßÄÏÇΩÏûÖ ÏôÑÎ£å");
      // res.render(path.join(__dirname, "..", "views", "index.html"));
    } else {
      console.log("DBÎ™ÖÎ†πÏù¥ Ï†úÎåÄÎ°ú Ïã§ÌñâÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§");
    }
  });
});
// ============================== Ïú†Ï†Ä ÏóÖÎ°úÎìú GET ==============================
router.get("/userupload", isLoggedIn, (req, res) => {
  console.log("Ïú†Ï†ÄÎ™Ö", req.session.passport.user.id);
  conn.connect();

  let sql = `SELECT A. *
                  , B.IMG_PATH_1
                  , B.IMG_PATH_2
                  , B.IMG_PATH_3
                  , B.IMG_PATH_4
               FROM TB_PRD A JOIN TB_PRD_IMG B
                 ON (A.PRD_NO = B.PRD_NO)
                AND A.CUST_ID= ?;`;

  conn.query(sql, [req.session.passport.user.id], (err, rows) => {
    if (!err) {
      console.log("Ïù¥ÎØ∏ÏßÄÎ∂àÎü¨Ïò§Í∏∞ ÏôÑÎ£å");
      console.log(rows);
      res.json({ row: rows });
    } else {
      console.log("DBÎ™ÖÎ†πÏù¥ Ï†úÎåÄÎ°ú Ïã§ÌñâÎêòÏßÄ ÏïäÏïòÏäµÎãàü•≤ü•≤ü•≤ü•≤ü•≤");
      console.log(err);
    }
  });
});

// ============================== Ïú†Ï†Ä ÏóÖÎ°úÎìú POST ==============================
// router.post("/userupload", (req, res) => { });

// ============================== ÏóÖÎ°úÎìú GET ==============================
// router.get("/upload", (req, res) => {
//   console.log(__dirname);
//   console.log("Ïú†Ï†ÄÎ™Ö", req.user.user?.MEM_ID);
//   res.render(path.join(__dirname, "..", "views", "upload.html"));
// });


// ============================== Îß§Î¨ºÎì±Î°ù POST ==============================
router.post("/upload", upload.array("image"), (req, res) => {
  const {
    image,
    property_type,
    property_name,
    property_location,
    property_address,
    property_description,
    property_floor,
    security_deposit,
    starting_price,
    maximum_price,
  } = req.body;
  console.log(req.body);
  console.log(req?.files);
  let maxPrdNo = 0;
  let sql1 = ` SELECT MAX(PRD_NO) AS MAX 
                 FROM TB_PRD;`;
  const sql2 = `
  INSERT INTO TB_PRD (
      PRD_NO,
      CUST_ID,
      PRD_TYPE,
      PRD_NAME,
      PRD_LOCAL,
      PRD_LOCA,
      PRD_INTRO,
      PRD_FLOOR,
      RENT_FEE,
      MIN_FEE,
      MAX_FEE
  ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
`;
  let sql3 = "INSERT INTO TB_AUCTION (PRD_NO, CUST_ID, AUC_FEE) VALUES (?, ?, ?);";
  // ÏµúÍ≥†Í∞í+1 Ï°∞Ìöå ÏøºÎ¶¨
  conn.query(sql1, [], (err, rows) => {
    if (!err) {
      console.log("prd_noÏµúÍ≥†Í∞í+1 Ï°∞ÌöåÏÑ±Í≥µ");
      maxPrdNo = rows[0].MAX + 1;
      console.log(typeof maxPrdNo);
      console.log(maxPrdNo);
      // Îß§Î¨º Îì±Î°ù ÏøºÎ¶¨
      conn.query(
        sql2,
        [maxPrdNo, req.session.passport.user.id, property_type, property_name, property_location, property_address, property_description, property_floor, security_deposit, starting_price, maximum_price,],
        (err, rows) => {
          if (!err) {
            console.log("Îß§Î¨º Îì±Î°ùÏôÑÎ£å");
            console.log(rows);
            const imgPath = {};
            let sql = "";
            for (let i = 0; i < req.files.length; i++) {
              // console.log(path.join(__dirname, "..", req.files[i].path))
              imgPath[`img${i + 1}`] = path.join(`/images/SALE_IMAGE/`, req.files[i].filename);
              // imgPath[`img${i + 1}`] = path.join("\\", req.files[i].filename).replaceAll("\\", "\\\\");
            }
            // for (let i = req.files.length; i < 4; i++) {
            //   imgPath[`img${i + 1}`] = "NULL";
            // }
            if (req.files.length == 1) {
              sql = `INSERT INTO TB_PRD_IMG (PRD_NO, IMG_PATH_1)
                  VALUES (?, ?);`;
            } else if (req.files.length == 2) {
              sql = `INSERT INTO TB_PRD_IMG (PRD_NO, IMG_PATH_1, IMG_PATH_2)
                  VALUES (?, ?, ?);`;
            } else if (req.files.length == 3) {
              sql = `INSERT INTO TB_PRD_IMG (PRD_NO, IMG_PATH_1, IMG_PATH_2, IMG_PATH_3)
                  VALUES (?, ?, ?, ?);`;
            } else if (req.files.length == 4) {
              sql = `INSERT INTO TB_PRD_IMG (PRD_NO, IMG_PATH_1, IMG_PATH_2, IMG_PATH_3, IMG_PATH_4)
                  VALUES (?, ?, ?, ?, ?);`;
            }
            conn.query(sql, [maxPrdNo, `${imgPath?.img1}`, `${imgPath?.img2}`, `${imgPath?.img3}`, `${imgPath?.img4}`,],
              (err, rows) => {
                if (!err) {
                  console.log("Ïù¥ÎØ∏ÏßÄÏÇΩÏûÖ ÏôÑÎ£åüòçüòçüòçüòçüòçüòç");
                  console.log(`Îì§Ïñ¥Í∞Ñ Ïù¥ÎØ∏ÏßÄ ${imgPath?.img1} `);
                  //======================== Îß§Î¨ºÎì±Î°ùÏãú Ïò•ÏÖòÌÖåÏù¥Î∏îÏóêÎèÑ ÏµúÏ†ÄÍ∞Ä ÏÖãÌåÖ 
                  conn.query(sql3, [maxPrdNo, req.session.passport.user.id, starting_price], function (err, rows) {
                    if (!err) {
                      console.log("Îß§Î¨ºÎì±Î°ùÏãú Ïò•ÏÖòÌÖåÏù¥Î∏îÏóêÎèÑ ÏµúÏ†ÄÍ∞Ä ÏÑ∏ÌåÖ ÏÑ±Í≥µ");
                      res.redirect("http://localhost:3333/");
                    } else {
                      console.log("Ïò§Î•ò!");
                    }
                  });
                } else {
                  console.log(err);
                  console.log("DBÎ™ÖÎ†πÏù¥ Ï†úÎåÄÎ°ú Ïã§ÌñâÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§");
                }
              }
            );
          } else {
            console.log(err);
            console.log("Îß§Î¨ºÎì±Î°ù Ïã§Ìå® ü•≤ü•≤ü•≤ü•≤");
          }
        }
      );
    } else {
      console.log("prd_noÏµúÍ≥†Í∞í+1 Ï°∞ÌöåÏã§Ìå®ü•≤ü•≤ü•≤ü•≤ü•≤");
    }
    // res.render(path.join(__dirname, "..", "views", "main.html"));
  });
});
// ============================== Î©îÏù∏ GET ==============================
// router.get("/", (req, res) => {
//   console.log(req.user?.MEM_ID);
//   // console.log()
//   // console.log()
//   res.render(path.join(__dirname, "..", "views", "main.html"));
// });

// ============================== Î°úÍ∑∏Ïù∏ GET==============================
// router.get("/login", isNotLoggedIn, (req, res) => {
//   console.log("req.user.userName");
//   console.log(req?.user?.accessToken);
//   console.log(req.user);
//   res.render(path.join(__dirname, "..", "views", "login.html"));
// });
// ============================== Î°úÍ∑∏Ïù∏POST==============================

router.post("/login", (req, res, next) => {
  // passport.authenticate() Î©îÏÑúÎìúÎ•º Ìò∏Ï∂úÌïòÏó¨ Î°úÏª¨(Local) Ïù∏Ï¶ù Ï†ÑÎûµÏùÑ Ïã§ÌñâÌï©ÎãàÎã§.
  // Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨Î•º ÏúÑÌïú ÎØ∏Îì§Ïõ®Ïñ¥ÏûÖÎãàÎã§.
  passport.authenticate(
    "local",
    {
      successRedirect: "http://localhost:3333/", // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Ïãú Î¶¨Îã§Ïù¥Î†âÌä∏Ìï† ÌéòÏù¥ÏßÄ
      failureRedirect: "/login", // Î°úÍ∑∏Ïù∏ Ïã§Ìå® Ïãú Î¶¨Îã§Ïù¥Î†âÌä∏Ìï† ÌéòÏù¥ÏßÄ
    },
    (authError, user, info) => {
      // console.log("7777777777777", req.user)
      if (authError) {
        // Ïù∏Ï¶ù ÏóêÎü¨Í∞Ä Î∞úÏÉùÌïòÎ©¥ ÏΩòÏÜîÏóê Ï∂úÎ†•ÌïòÍ≥†, ÏóêÎü¨ Ìï∏Îì§Îü¨Î°ú Ï†ÑÎã¨Ìï©ÎãàÎã§.
        console.log("Ïù∏Ï¶ùÏóêÎü¨ ü•≤");
        console.error(authError);
        return next(authError);
      }

      if (!user) {
        console.log(user);
        // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏùÑ Í≤ΩÏö∞, Ï¶â Ïù∏Ï¶ù Ïã§Ìå® Ïãú info.messageÎ•º ÌÜµÌï¥ ÏóêÎü¨ Î©îÏãúÏßÄÎ•º Í∞ÄÏ†∏ÏôÄ Î©îÏù∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏Ìï©ÎãàÎã§.
        console.log("Ïù∏Ï¶ùÏã§Ìå® „Öúüò•");
        return res.redirect(`/login?error=${info.message}`);
      }

      // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä Ï°¥Ïû¨ÌïòÎ©¥, req.login()ÏùÑ Ìò∏Ï∂úÌïòÏó¨ ÏÇ¨Ïö©ÏûêÎ•º Î°úÍ∑∏Ïù∏ÏãúÌÇµÎãàÎã§.
      return req.login(user, (loginError) => {
        if (loginError) {
          // Î°úÍ∑∏Ïù∏ Ï§ë ÏóêÎü¨Í∞Ä Î∞úÏÉùÌïòÎ©¥ ÏΩòÏÜîÏóê Ï∂úÎ†•ÌïòÍ≥†, ÏóêÎü¨ Ìï∏Îì§Îü¨Î°ú Ï†ÑÎã¨Ìï©ÎãàÎã§.
          console.log("Î°úÍ∑∏Ïù∏ Ï§ë ÏóêÎü¨ „Öúüòí");
          console.log(loginError);
          return next(loginError);
        }

        // Î°úÍ∑∏Ïù∏Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïù¥Î£®Ïñ¥ÏßÄÎ©¥ Î©îÏù∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏Ìï©ÎãàÎã§.
        console.log("Î°úÍ∑∏Ïù∏ÏÑ±Í≥µüòç");
        console.log(req.user);
        console.log(req.session);
        console.log(req.session.passport.user);

        res.json({ user: req.user });
        next();
      });
    }
  )(req, res, next); // passport.authenticate()Îäî ÎØ∏Îì§Ïõ®Ïñ¥Î•º Î¶¨ÌÑ¥ÌïòÎØÄÎ°ú, ÎØ∏Îì§Ïõ®Ïñ¥ ÎÇ¥Ïùò ÎØ∏Îì§Ïõ®Ïñ¥Î•º ÏÇ¨Ïö©ÌïòÍ∏∞ ÏúÑÌï¥ (req, res, next)Î•º Î∂ôÏó¨Ï§çÎãàÎã§.
});

// router.post("/login",(req,res)=>{
//   console.log("123")
//   res.redirect("http://localhost:3000/filter")
// })

// ============================== ÌöåÏõêÍ∞ÄÏûÖ GET==============================
// router.get("/join", (req, res) => {
//   // Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°ú ÌÖåÏä§Ìä∏
//   res.render(path.join(__dirname, "..", "views", "join.html"));
//   // console.log(path.join(__dirname, "..", "views", "index.html"))
// });

// ============================== ÌöåÏõêÍ∞ÄÏûÖ POST==============================

router.post("/join", (req, res, next) => {
  const {
    MEM_ID,
    MEM_TYPE,
    PASSWD,
    MEM_NAME,
    MEM_NICK,
    MEM_TEL,
    MEM_ADDR,
    BIZ_NUM,
  } = req.body;
  console.log("111111111111111111111111111111", req.body.MEM_ID);
  console.log("111111111111111111111111111111", req.body.PASSWD);
  // console.log("111111111111111111111111111111", req)

  console.log("22222222222222", req.body.userJoinInfo);
  conn.query(
    "SELECT * FROM TB_MEMBER WHERE MEM_ID = ?",
    [MEM_ID],
    (err, rows) => {
      if (err) {
        console.error(err);
        return next(err);
      }
      const exUser = rows[0];
      // console.log("????", rows);
      // console.log("????", exUser);

      if (exUser) {
        // Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî Ïù¥Î©îÏùºÏùº Í≤ΩÏö∞, ÌöåÏõêÍ∞ÄÏûÖ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏ÌïòÎ©¥ÏÑú Ïò§Î•ò Î©îÏãúÏßÄ Ï†ÑÎã¨
        console.log("Ïù¥ÎØ∏Ï°¥Ïû¨ÌïòÎäî ÌöåÏõê");
        return res.redirect("/join?error=exist");
      }

      bcrypt.hash(PASSWD, 12, (err, hash) => {
        if (err) {
          console.error(err);
          return next(err);
        }

        conn.query(
          "INSERT INTO TB_MEMBER (MEM_ID, MEM_TYPE, PASSWD, MEM_NAME, MEM_NICK, MEM_TEL, MEM_ADDR, PROVIDER) VALUES (?, ?, ?, ?, ?, ?,?, 'Local');",
          [MEM_ID, MEM_TYPE, hash, MEM_NAME, MEM_NICK, MEM_TEL, MEM_ADDR],
          (err) => {
            if (err) {
              console.error(err);
              return next(err);
            }
            console.log("ÌöåÏõêÍ∞ÄÏûÖÏÑ±Í≥µ „Öé„Öé");
            return res.redirect("/http://localhost:3333/"); // ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ Ïãú Î©îÏù∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
          }
        );
      });
    }
  );
});

// ============================== Î°úÍ∑∏ÏïÑÏõÉ GET==============================
router.get("/logout", (req, res) => {
  console.log("Î°úÍ∑∏ÏïÑÏõÉ Îì§Ïñ¥ÏôîÏùÑÎïê ÏûàÏñ¥ÏïºÌï®", req.session.passport.user);
  console.log(req.user);
  req.logout(() => {
    console.log("ÏßÄÍ∏àÏùÄ ÏóÜÏñ¥ÏïºÌï®", req?.session?.passport?.user ?? "ÏÇ¨ÎùºÏßê ");
    // res.render(path.join(__dirname, "..", "views", "main.html"));
    return res.redirect("/http://localhost:3333/");
  });
});

// ============================== Ïπ¥Ïπ¥Ïò§Î°úÍ∑∏Ïù∏ GET==============================
router.get("/kakao", passport.authenticate("kakao"));
// ============================== Ïπ¥Ïπ¥Ïò§Î°úÍ∑∏Ïù∏ GET==============================
router.get(
  "/kakao/callback",
  passport.authenticate("kakao", {
    failureRedirect: "/?error=Ïπ¥Ïπ¥Ïò§Î°úÍ∑∏Ïù∏ Ïã§Ìå®",
  }),
  (req, res) => {
    console.log("Ïπ¥Ïπ¥Ïò§Î°úÍ∑∏Ïù∏ÏÑ±Í≥µ!üòçüòç");
    // console.log("222222222222222222222222", req.user.exUser);
    // res.render(path.join(__dirname, "..", "views", "main.html"), {
    //   user: req.user.exUser,
    // });
    return res.redirect("/");
  }
);
// ============================== Ïπ¥Ïπ¥Ïò§Î°úÍ∑∏ÏïÑÏõÉ GET==============================
router.get("/kakao/logout", async (req, res) => {
  try {
    const ACCESS_TOKEN = req.user.accessToken;
    let logout = await axios({
      method: "post",
      url: "https://kapi.kakao.com/v1/user/unlink",
      headers: {
        Authorization: `Bearer ${ACCESS_TOKEN}`,
      },
    });
  } catch (error) {
    console.error(error);
    console.log("error", "2222222222222222222222222222222222222");
    // res.json(error);
  }
  // ÏÑ∏ÏÖò Ï†ïÎ¶¨
  req.logout(() => {
    console.log("Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏ÏïÑÏõÉ ÏÑ±Í≥µüòäüòäüòä");
    req.session.destroy();
  });
  // res.render(path.join(__dirname, "..", "views", "main.html"));
  res.redirect("/http://localhost:3333/");
});

// =====================ÎÇ¥Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞=========jh=====================

router.get("/myinfo", function (req, res) {
  conn.connect();
  let sql = "SELECT * FROM TB_MEMBER WHERE= ?";
  conn.query(sql, [req.session.passport?.user.id], function (err, rows) {
    if (!err) {
      console.log("ÎÇ¥Ï†ïÎ≥¥ Î∂àÎü¨Ïò§Í∏∞ ÏÑ±Í≥µ");
      if (rows.length == 0) {
        console.log("Ï†ïÎ≥¥ ÏóÜÏùå");
      } else {
        console.log("Ï†ïÎ≥¥ ÏóÜÏùå");
        res.json({ rows: rows });
      }
    }
    // res.end();
  });
});

//=========================================== ÌïÑÌÑ∞ Í∏∞Îä• ===================================================

router.get("/Filter", function (req, res) {
  let Ft = req?.query;
  let FS1 = req?.query?.test?.S1;
  let FS2 = req?.query?.test?.S2;
  let FS3 = req?.query?.test?.S3;
  let FL1 = req?.query?.test?.L1;
  let FL2 = req?.query?.test?.L2;
  let FV1 = req?.query?.test?.V1;
  console.log("S1:", req?.query?.test?.S1);
  console.log("S2:", req?.query?.test?.S2);
  console.log("S3:", req?.query?.test?.S3);
  console.log("L1:", req?.query?.test?.L1);
  console.log("L2:", req?.query?.test?.L2);
  console.log("V1:", req?.query?.test?.V1);
  console.log("33333333", req?.query);

  console.log(req.query.test);


  conn.connect();

  let sql =
    `SELECT A.*, B.*, C.MAX_AUC_FEE
  FROM TB_PRD A
  JOIN TB_PRD_IMG B ON A.PRD_NO = B.PRD_NO
  JOIN (
      SELECT PRD_NO, MAX(AUC_FEE) AS MAX_AUC_FEE
      FROM TB_AUCTION
      GROUP BY PRD_NO
  ) C ON A.PRD_NO = C.PRD_NO
  WHERE A.PRD_TYPE IN (?, ?, ?)
  AND A.PRD_LOCAL IN (?, ?)
  ORDER BY
      CASE
          WHEN ? = 1 THEN -A.PRD_VIEWS
          ELSE A.PRD_VIEWS
      END;`;

  let sql2 =
    `SELECT A.*, B.*, C.MAX_AUC_FEE
  FROM (
      SELECT *
      FROM TB_PRD
      WHERE PRD_LOCAL IN (?, ?)
  ) A
  JOIN TB_PRD_IMG B ON A.PRD_NO = B.PRD_NO
  JOIN (
      SELECT PRD_NO, MAX(AUC_FEE) AS MAX_AUC_FEE
      FROM TB_AUCTION
      GROUP BY PRD_NO
  ) C ON A.PRD_NO = C.PRD_NO
  ORDER BY
      CASE
          WHEN ? = 1 THEN -A.PRD_VIEWS
          ELSE A.PRD_VIEWS
      END;`;

  let sql3 =
    `SELECT A.*, B.*, C.MAX_AUC_FEE
  FROM (
      SELECT *
      FROM TB_PRD
      WHERE PRD_TYPE IN (?, ?, ?)
  ) A
  JOIN TB_PRD_IMG B ON A.PRD_NO = B.PRD_NO
  JOIN (
      SELECT PRD_NO, MAX(AUC_FEE) AS MAX_AUC_FEE
      FROM TB_AUCTION
      GROUP BY PRD_NO
  ) C ON A.PRD_NO = C.PRD_NO
  ORDER BY
      CASE
          WHEN ? = 1 THEN -A.PRD_VIEWS
          ELSE A.PRD_VIEWS
      END;`;

  let sql4 =
    `SELECT A.*, B.*, C.MAX_AUC_FEE
  FROM (
      SELECT *
      FROM TB_PRD
      WHERE PRD_LOCAL IN (?) OR PRD_LOCAL NOT IN ('Í¥ëÏ£º')
  ) A
  JOIN TB_PRD_IMG B ON A.PRD_NO = B.PRD_NO
  JOIN (
      SELECT PRD_NO, MAX(AUC_FEE) AS MAX_AUC_FEE
      FROM TB_AUCTION
      GROUP BY PRD_NO
  ) C ON A.PRD_NO = C.PRD_NO
  ORDER BY
      CASE
          WHEN ? = 1 THEN -A.PRD_VIEWS
          ELSE A.PRD_VIEWS
      END;`;

  let sql5 =
    `SELECT A.*, B.*, C.MAX_AUC_FEE
  FROM (
      SELECT *
      FROM TB_PRD
      WHERE PRD_TYPE IN (?, ?, ?)
      OR (PRD_LOCAL IN (?) AND PRD_LOCAL NOT IN ('Í¥ëÏ£º'))
  ) A
  JOIN TB_PRD_IMG B ON A.PRD_NO = B.PRD_NO
  JOIN (
      SELECT PRD_NO, MAX(AUC_FEE) AS MAX_AUC_FEE
      FROM TB_AUCTION
      GROUP BY PRD_NO
  ) C ON A.PRD_NO = C.PRD_NO
  ORDER BY
      CASE
          WHEN ? = 1 THEN -A.PRD_VIEWS
          ELSE A.PRD_VIEWS
      END;`;

  let sql6 =
    `SELECT A.*, B.*, C.MAX_AUC_FEE
  FROM (
      SELECT *
      FROM TB_PRD
  ) A
  JOIN TB_PRD_IMG B ON A.PRD_NO = B.PRD_NO
  JOIN (
      SELECT PRD_NO, MAX(AUC_FEE) AS MAX_AUC_FEE
      FROM TB_AUCTION
      GROUP BY PRD_NO
  ) C ON A.PRD_NO = C.PRD_NO
  ORDER BY
      CASE
          WHEN ? = '1' THEN -A.PRD_VIEWS
          ELSE A.PRD_VIEWS
      END;`


  if (
    FS1 === undefined &&
    FS2 === undefined &&
    FS3 === undefined &&
    FL1 === undefined &&
    FL2 === undefined
  ) {
    conn.query(sql6, [FV1], function (err, rows) {
      if (!err) {
        console.log(
          "Ï°∞ÌöåÏàòÏ°∞ÌöåÏàòÏ°∞ÌöåÏàòÏ°∞ÌöåÏàòÏ°∞ÌöåÏàòÏ°∞ÌöåÏàòÏ°∞ÌöåÏàòÏ°∞ÌöåÏàòÏ°∞ÌöåÏàòÏ°∞ÌöåÏàòÏ°∞ÌöåÏàòÏ°∞ÌöåÏàòÏ°∞ÌöåÏàòÏ°∞ÌöåÏàò"
        );
        res.json({ rows: rows });
        // res.render(path.join(__dirname, "..", "views", "sale.html"), {
        //   row: rows})
      } else {
        console.log("Ïò§Î•ò!");
      }
    });
  } else if (
    FS1 === undefined &&
    FS2 === undefined &&
    FS3 === undefined &&
    FL2 === "Ï†ÑÎÇ®"
  ) {
    conn.query(sql4, [FL1, FV1], function (err, rows) {
      if (!err) {
        console.log("ÏúÑÏπò!!!!!!!!!!!!!!!!!!!!!!!!");
        res.json({ rows: rows });
        // res.render(path.join(__dirname, "..", "views", "sale.html"), {
        //         row: rows})
      } else {
        console.log("Ïò§Î•ò2!");
      }
    });
  } else if (FS1 === undefined && FS2 === undefined && FS3 === undefined) {
    conn.query(sql2, [FL1, FL2, FV1], function (err, rows) {
      if (!err) {
        console.log("ÏúÑÏπò!!!!!!!!!!!!!!!!!!!!!!!!");
        res.json({ rows: rows });
        // res.render(path.join(__dirname, "..", "views", "sale.html"), {
        //   row: rows})
      } else {
        console.log("Ïò§Î•ò2!");
      }
    });
  } else if (FL1 === undefined && FL2 === undefined) {
    conn.query(sql3, [FS1, FS2, FS3, FV1], function (err, rows) {
      if (!err) {
        console.log("Ïú†Ìòï!!!!!!!!!!!!!!!!!!!!!!!!");
        res.json({ rows: rows });
        // res.render(path.join(__dirname, "..", "views", "sale.html"), {
        //   row: rows})
      } else {
        console.log("Ïò§Î•ò3!");
      }
    });
  } else if (FL2 === "Ï†ÑÎÇ®") {
    conn.query(sql5, [FS1, FS2, FS3, FL1, FV1], function (err, rows) {
      if (!err) {
        console.log("2ÎçîÎ∏î!!!!!!!!!!!!!!!!!!!!!!!!");
        res.json({ rows: rows });
        // console.log(rows)
        // res.render(path.join(__dirname, "..", "views", "sale.html"), {
        //   row: rows})
      } else {
        console.log("Ïò§Î•ò!");
      }
    });
  } else {
    conn.query(sql, [FS1, FS2, FS3, FL1, FL2, FV1], function (err, rows) {
      if (!err) {
        console.log("ÎçîÎ∏î!!!!!!!!!!!!!!!!!!!!!!!!");
        res.json({ rows: rows });
        // res.render(path.join(__dirname, "..", "views", "sale.html"), {
        //   row: rows})
      } else {
        console.log("Ïò§Î•ò!");
      }
    });
  }
  // next()
});

//==========================Ï∞úÍ∏∞Îä• GET ================================

router.get("/Wish", function (req, res) {
  console.log(
    "Ï∞úÏÑ±Í≥µ „Öé„Öé"
  );

  let prdN = req.query.PRD_NO
  let checkTF = req.query.isChecked
  console.log(prdN);
  console.log(checkTF);
  // let ckL = req.query.I;
  // let ck1 = req.query.I[0];
  // console.log(ckL);

  conn.connect();

  addSql = `insert into TB_PRD_LIKE values (?,?,DEFAULT,DEFAULT)`;
  delSql = "delete from TB_PRD_LIKE where CUST_ID = ? and PRD_NO = ?";

  if (checkTF == 'false') {
    conn.query(delSql, [req.session.passport.user.id, prdN], function (err, rows) {
      if (!err) {
        console.log("Delete!");
        res.end()
      } else {
        console.log("Ïò§Î•ò!");
      }
    });
  } else if (checkTF == 'true') {
    conn.query(addSql, [req.session.passport.user.id, prdN], function (err, rows) {
      if (!err) {
        console.log("Insert!");
        res.end()
      } else {
        console.log("Ïò§Î•ò!");
      }
    });
  }
});
//======================================== ÌöåÏõêÏ†ïÎ≥¥ ÏàòÏ†ï GET =======================================

//ÌöåÏõêÏ†ïÎ≥¥ ÏàòÏ†ï ÌéòÏù¥ÏßÄÏóê ÌöåÏõêÏ†ïÎ≥¥ ÎøåÎ†§Ï£ºÎäî Í∏∞Îä•
router.get("/Modify", function (req, res) {
  let sql = `SELECT * FROM TB_MEMBER WHERE MEM_ID = ?`;
  conn.query(sql, [req.session.passport.user.id], function (err, rows) {
    if (!err) {
      console.log("Ïó¨Í∏∞ÏûàÎã§!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
      console.log(rows);
      res.json({ row: rows });
    } else {
      console.log("Ïò§Î•ò!");
    }
  });
});

//======================================== ÌöåÏõêÏ†ïÎ≥¥ ÏàòÏ†ï POST =======================================

router.post("/Modify", function (req, res) {
  let mPW = req.body.PASSWD;
  let mNick = req.body.MEM_NICK;

  let sql = `UPDATE TB_MEMBER
      SET PASSWD = ?, MEM_NICK = ?
      WHERE MEM_ID = ? ;`;

  //ÎπÑÎ∞ÄÎ≤àÌò∏
  bcrypt.hash(mPW, 12, (err, hash) => {
    if (err) {
      console.error(err);
      return next(err);
    }

    //ÏàòÏ†ï Í∞ÄÎä•Ìïú ÌöåÏõêÏ†ïÎ≥¥ ÏûÖÎ†• ÌõÑ ÏàòÏ†ï ÎàÑÎ•¥Î©¥ DBÏóÖÎç∞Ïù¥Ìä∏ Ìï¥Ï£ºÎäî Í∏∞Îä•
    conn.query(sql, [hash, mNick, req.session.passport.user.id], function (err, rows) {
      if (!err) {
        console.log(rows);
      } else {
        console.log("Ïò§Î•ò!");
      }
    });
  });
});







//=========================================== Í¥ÄÏã¨Î™©Î°ù GET ======================================

router.get("/Wishlist", function (req, res) {
  let sql = `SELECT A.PRD_NO, A.CUST_ID, A.WISH_YN, B.IMG_PATH_1, MAX(C.AUC_FEE) AS AUC_FEE, D.*
  FROM TB_PRD_LIKE A LEFT JOIN TB_PRD_IMG B ON A.PRD_NO = B.PRD_NO
                LEFT JOIN TB_AUCTION C ON A.PRD_NO = C.PRD_NO
                     LEFT JOIN TB_PRD D ON A.PRD_NO = D.PRD_NO
  WHERE A.CUST_ID = ?
    AND WISH_YN ='Y'
  group by A.PRD_NO, A.CUST_ID, A.WISH_YN,B.IMG_PATH_1;
`;

  conn.query(sql, [req.session.passport.user.id], function (err, rows) {
    if (!err) {
      console.log("Ï∞úÎ™©Î°ù Î∂àÎü¨Ïò§Í∏∞!!!!!!!!!!");
      console.log(rows);
      res.json({ row: rows });
    } else {
      console.log("Ïò§Î•ò!!!");
    }
  });
});

//==================================== Ïò¨Î¶∞Îß§Î¨º GET =============================================

router.get("/Uplist", function (req, res) {
  let sql = `SELECT A.*
  , B.*
  , C.*
  , MaxAuction.Max_AUC_FEE AS Max_AUC_FEE
  FROM TB_PRD A
  JOIN TB_PRD_IMG B ON (A.PRD_NO = B.PRD_NO)
  JOIN (
    SELECT DISTINCT PRD_NO, CUST_ID
    FROM TB_AUCTION
    ) C ON (B.PRD_NO = C.PRD_NO)
    JOIN (
    SELECT PRD_NO, MAX(AUC_FEE) AS Max_AUC_FEE
    FROM TB_AUCTION
    GROUP BY PRD_NO
    ) MaxAuction ON (C.PRD_NO = MaxAuction.PRD_NO)
    WHERE A.CUST_ID = ?;`;

  conn.query(sql, [req.session.passport.user.id], function (err, rows) {
    if (!err) {
      console.log(
        "Ïò¨Î¶∞ Îß§Î¨º Î∂àÎü¨Ïò§Í∏∞~~~~~~~~~~~~~~~11111111111111111111111111111111"
      );
      console.log(rows);
      res.json({ row: rows });
    } else {
      console.log("Ïò§Î•ò!!!");
    }
  });
});

//========================== ÏûÖÏ∞∞ Î™©Î°ù GET ==========================================

router.get("/Auclist", function (req, res) {
  let sql = `SELECT A.*
  , B.*
  , C.*
  , MaxAuction.Max_AUC_FEE AS Max_AUC_FEE
  FROM TB_PRD A
  JOIN TB_PRD_IMG B ON (A.PRD_NO = B.PRD_NO)
  JOIN (
    SELECT DISTINCT PRD_NO, CUST_ID
    FROM TB_AUCTION
    ) C ON (B.PRD_NO = C.PRD_NO)
    JOIN (
    SELECT PRD_NO, MAX(AUC_FEE) AS Max_AUC_FEE
    FROM TB_AUCTION
    GROUP BY PRD_NO
    ) MaxAuction ON (C.PRD_NO = MaxAuction.PRD_NO)
    WHERE C.CUST_ID = ?;`;

  let sql2 = `SELECT PRD_NO, MAX(AUC_FEE) AS MAX_AUC_FEE
    FROM TB_AUCTION
    GROUP BY PRD_NO;`;

  conn.query(sql, [req.session.passport.user.id], function (err, rows) {
    if (!err) {
      console.log("ÏûÖÏ∞∞ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞!");
      console.log(rows);

      conn.query(sql2, [], function (err, rows2) {
        if (!err) {
          console.log("Îß§Î¨º ÏµúÍ≥†Í∞Ä Î∂àÎü¨Ïò§Í∏∞!!");
          console.log(rows2);
          res.json({ row: rows, row2: rows2 });
        } else {
          console.log("Ïò§Î•ò!");
        }
      });
    } else {
      console.log("Ïò§Î•ò!!!");
    }
  });
});

//=======================Ïù¥Í±∞Îäî Î¨¥Ï°∞Í±¥ Îß®Î∞ëÏúºÎ°ú ÎÇ¥Î¶¨Í∏∞!!=======================
router.get("*", function (req, res) {
  console.log("Î¶¨ÏóëÌä∏Î°ú3333", req.session.passport?.user?.id)
  console.log("Î¶¨ÏóëÌä∏Î°ú Ïù¥Îèô@@@@@@@@@");
  res.sendFile(path.join(__dirname, "..", "ddp-react", "build", "index.html"));
});

module.exports = router;
